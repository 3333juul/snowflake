#!/bin/bash

wallpapers_dir="$HOME/media/pictures/wallpapers"
config_file="$HOME/.config/hypr/hyprpaper.conf"
theme="wallpaper"

# config
ipc=on
splash=false

if [[ ! -f "$config_file" ]]; then
  touch "$config_file"
fi

if [[ "$1" == "--preview" ]]; then
  export PREVIEW=true
fi

# select a wallpaper using rofi
select_wallpaper() {
  wallpapers=$(find "$wallpapers_dir" -type f)

  #selected_wallpaper=$(for a in $wallpapers; do
  selected_wallpaper=$(echo "$wallpapers" | while IFS= read -r a; do
    echo -en "${a##*/}\0icon\x1fthumbnail://$a\n" # x1f$a
  done | rofi -dmenu -i -p "WALLPAPER" -theme $theme)

  echo "$selected_wallpaper"
}

# select a monitor using rofi
select_monitor() {
  monitors=$(hyprctl -j monitors | jq -r '.[].name')
  monitor_count=$(echo "$monitors" | wc -l)

  selected_monitor=$(for monitor in $monitors; do
    echo -en "$monitor\n"
  done | PREVIEW=false rofi -dmenu -p "MONITOR" -theme $theme -no-show-icons -theme-str "window { width: 350px; } listview { lines: $monitor_count; columns: 1;}")

  echo "$selected_monitor"
}

# set the wallpaper on a specified monitor
set_wallpaper() {
  local monitor=$1
  local wallpaper_path=$2

  # preload and set the new wallpaper
  hyprctl hyprpaper preload "$wallpaper_path"
  hyprctl hyprpaper wallpaper "$monitor,$wallpaper_path"

  # unload previous wallpaper
  hyprctl hyprpaper unload unused
}

# generate config file
set_config() {
  {
    echo "# Content of this file was automatically generated by $(basename "$0") script"
    echo ""

    echo "# preload"
    hyprctl hyprpaper listactive | while IFS=' = ' read -r monitor path; do
      echo "preload = ~${path#"$HOME"}"
    done

    echo ""
    echo "# set"
    hyprctl hyprpaper listactive | while IFS=' = ' read -r monitor path; do
      echo "wallpaper = $monitor, ~${path#"$HOME"}"
    done

    echo ""
    echo "# config"
    echo "ipc = $ipc"
    echo "splash = $splash"
  } >"$config_file"
}

# argument handling
case "$1" in
--path)
  if [[ -n $2 && -f $2 ]]; then
    selected_monitor=$(select_monitor)
    if [[ -n $selected_monitor ]]; then
      set_wallpaper "$selected_monitor" "$2"
      set_config
    fi
  else
    echo "Invalid or missing wallpaper path."
  fi
  ;;

*)
  selected_wallpaper=$(select_wallpaper)
  if [[ -n $selected_wallpaper ]]; then
    selected_monitor=$(select_monitor)
    if [[ -n $selected_monitor ]]; then
      set_wallpaper "$selected_monitor" "$wallpapers_dir/$selected_wallpaper"
      set_config
    fi
  fi
  ;;
esac
